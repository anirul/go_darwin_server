// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: world_parameter.proto

package darwin_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReturnEnum int32

const (
	ReturnEnum_RETURN_ERROR    ReturnEnum = 0 // Error in the function?
	ReturnEnum_RETURN_OK       ReturnEnum = 1 // OK this passed well.
	ReturnEnum_RETURN_REJECTED ReturnEnum = 2 // Rejected by the server.
)

// Enum value maps for ReturnEnum.
var (
	ReturnEnum_name = map[int32]string{
		0: "RETURN_ERROR",
		1: "RETURN_OK",
		2: "RETURN_REJECTED",
	}
	ReturnEnum_value = map[string]int32{
		"RETURN_ERROR":    0,
		"RETURN_OK":       1,
		"RETURN_REJECTED": 2,
	}
)

func (x ReturnEnum) Enum() *ReturnEnum {
	p := new(ReturnEnum)
	*p = x
	return p
}

func (x ReturnEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReturnEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_world_parameter_proto_enumTypes[0].Descriptor()
}

func (ReturnEnum) Type() protoreflect.EnumType {
	return &file_world_parameter_proto_enumTypes[0]
}

func (x ReturnEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReturnEnum.Descriptor instead.
func (ReturnEnum) EnumDescriptor() ([]byte, []int) {
	return file_world_parameter_proto_rawDescGZIP(), []int{0}
}

type VitalEnum int32

const (
	VitalEnum_VITAL_NONE    VitalEnum = 0 // Error status incorrect.
	VitalEnum_VITAL_ALIVE   VitalEnum = 1 // The player is alive and kicking.
	VitalEnum_VITAL_DEAD    VitalEnum = 2 // This player is dead.
	VitalEnum_VITAL_LOADING VitalEnum = 3 // This player is loading in.
)

// Enum value maps for VitalEnum.
var (
	VitalEnum_name = map[int32]string{
		0: "VITAL_NONE",
		1: "VITAL_ALIVE",
		2: "VITAL_DEAD",
		3: "VITAL_LOADING",
	}
	VitalEnum_value = map[string]int32{
		"VITAL_NONE":    0,
		"VITAL_ALIVE":   1,
		"VITAL_DEAD":    2,
		"VITAL_LOADING": 3,
	}
)

func (x VitalEnum) Enum() *VitalEnum {
	p := new(VitalEnum)
	*p = x
	return p
}

func (x VitalEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VitalEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_world_parameter_proto_enumTypes[1].Descriptor()
}

func (VitalEnum) Type() protoreflect.EnumType {
	return &file_world_parameter_proto_enumTypes[1]
}

func (x VitalEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VitalEnum.Descriptor instead.
func (VitalEnum) EnumDescriptor() ([]byte, []int) {
	return file_world_parameter_proto_rawDescGZIP(), []int{1}
}

type StatusEnum int32

const (
	StatusEnum_STATUS_UNKNOWN   StatusEnum = 0 // Unknown this is an error!
	StatusEnum_STATUS_ON_GROUND StatusEnum = 1 // On the ground.
	StatusEnum_STATUS_JUMPING   StatusEnum = 2 // Jumping.
	StatusEnum_STATUS_LOADING   StatusEnum = 3 // Loading in the game.
	StatusEnum_STATUS_DEAD      StatusEnum = 4 // Dead.
)

// Enum value maps for StatusEnum.
var (
	StatusEnum_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_ON_GROUND",
		2: "STATUS_JUMPING",
		3: "STATUS_LOADING",
		4: "STATUS_DEAD",
	}
	StatusEnum_value = map[string]int32{
		"STATUS_UNKNOWN":   0,
		"STATUS_ON_GROUND": 1,
		"STATUS_JUMPING":   2,
		"STATUS_LOADING":   3,
		"STATUS_DEAD":      4,
	}
)

func (x StatusEnum) Enum() *StatusEnum {
	p := new(StatusEnum)
	*p = x
	return p
}

func (x StatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_world_parameter_proto_enumTypes[2].Descriptor()
}

func (StatusEnum) Type() protoreflect.EnumType {
	return &file_world_parameter_proto_enumTypes[2]
}

func (x StatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusEnum.Descriptor instead.
func (StatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_world_parameter_proto_rawDescGZIP(), []int{2}
}

type TypeEnum int32

const (
	TypeEnum_TYPE_UNKNOWN   TypeEnum = 0 // Unknown this is an error!
	TypeEnum_TYPE_GROUND    TypeEnum = 1 // From where the gravity is generated.
	TypeEnum_TYPE_EXPLOSION TypeEnum = 2 // Explosion that push stuff around.
	TypeEnum_TYPE_UPGRADE   TypeEnum = 3 // Upgrade to upgrade character.
	TypeEnum_TYPE_GREEN     TypeEnum = 4 // Greenery (no effect on anything).
	TypeEnum_TYPE_BROWN     TypeEnum = 5 // Tree bark and non destructible elements.
	TypeEnum_TYPE_WATER     TypeEnum = 6 // Water.
	TypeEnum_TYPE_CHARACTER TypeEnum = 7 // Player character.
)

// Enum value maps for TypeEnum.
var (
	TypeEnum_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "TYPE_GROUND",
		2: "TYPE_EXPLOSION",
		3: "TYPE_UPGRADE",
		4: "TYPE_GREEN",
		5: "TYPE_BROWN",
		6: "TYPE_WATER",
		7: "TYPE_CHARACTER",
	}
	TypeEnum_value = map[string]int32{
		"TYPE_UNKNOWN":   0,
		"TYPE_GROUND":    1,
		"TYPE_EXPLOSION": 2,
		"TYPE_UPGRADE":   3,
		"TYPE_GREEN":     4,
		"TYPE_BROWN":     5,
		"TYPE_WATER":     6,
		"TYPE_CHARACTER": 7,
	}
)

func (x TypeEnum) Enum() *TypeEnum {
	p := new(TypeEnum)
	*p = x
	return p
}

func (x TypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_world_parameter_proto_enumTypes[3].Descriptor()
}

func (TypeEnum) Type() protoreflect.EnumType {
	return &file_world_parameter_proto_enumTypes[3]
}

func (x TypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeEnum.Descriptor instead.
func (TypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_world_parameter_proto_rawDescGZIP(), []int{3}
}

type SpecialStateEnum int32

const (
	SpecialStateEnum_SPECIAL_STATE_WAIT     SpecialStateEnum = 0 // Wait for someone to use this.
	SpecialStateEnum_SPECIAL_STATE_ACTIVE   SpecialStateEnum = 1 // Special is active.
	SpecialStateEnum_SPECIAL_STATE_COOLDOWN SpecialStateEnum = 2 // Special is on cooldown.
)

// Enum value maps for SpecialStateEnum.
var (
	SpecialStateEnum_name = map[int32]string{
		0: "SPECIAL_STATE_WAIT",
		1: "SPECIAL_STATE_ACTIVE",
		2: "SPECIAL_STATE_COOLDOWN",
	}
	SpecialStateEnum_value = map[string]int32{
		"SPECIAL_STATE_WAIT":     0,
		"SPECIAL_STATE_ACTIVE":   1,
		"SPECIAL_STATE_COOLDOWN": 2,
	}
)

func (x SpecialStateEnum) Enum() *SpecialStateEnum {
	p := new(SpecialStateEnum)
	*p = x
	return p
}

func (x SpecialStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecialStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_world_parameter_proto_enumTypes[4].Descriptor()
}

func (SpecialStateEnum) Type() protoreflect.EnumType {
	return &file_world_parameter_proto_enumTypes[4]
}

func (x SpecialStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecialStateEnum.Descriptor instead.
func (SpecialStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_world_parameter_proto_rawDescGZIP(), []int{4}
}

type CharacterTypeEnum int32

const (
	CharacterTypeEnum_CHARACTER_NONE   CharacterTypeEnum = 0 // Error status incorrect.
	CharacterTypeEnum_CHARACTER_PLAYER CharacterTypeEnum = 1 // Player character.
	CharacterTypeEnum_CHARACTER_NPC    CharacterTypeEnum = 2 // Non player character (AI).
)

// Enum value maps for CharacterTypeEnum.
var (
	CharacterTypeEnum_name = map[int32]string{
		0: "CHARACTER_NONE",
		1: "CHARACTER_PLAYER",
		2: "CHARACTER_NPC",
	}
	CharacterTypeEnum_value = map[string]int32{
		"CHARACTER_NONE":   0,
		"CHARACTER_PLAYER": 1,
		"CHARACTER_NPC":    2,
	}
)

func (x CharacterTypeEnum) Enum() *CharacterTypeEnum {
	p := new(CharacterTypeEnum)
	*p = x
	return p
}

func (x CharacterTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CharacterTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_world_parameter_proto_enumTypes[5].Descriptor()
}

func (CharacterTypeEnum) Type() protoreflect.EnumType {
	return &file_world_parameter_proto_enumTypes[5]
}

func (x CharacterTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CharacterTypeEnum.Descriptor instead.
func (CharacterTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_world_parameter_proto_rawDescGZIP(), []int{5}
}

// SpecialEffectParameter
// Next: 5
type SpecialEffectParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Special value.
	SpecialStateEnum SpecialStateEnum `protobuf:"varint,1,opt,name=special_state_enum,json=specialStateEnum,proto3,enum=proto.SpecialStateEnum" json:"special_state_enum,omitempty"`
	// Effect duration.
	EffectDuration float64 `protobuf:"fixed64,2,opt,name=effect_duration,json=effectDuration,proto3" json:"effect_duration,omitempty"`
	// Time left for the special or cooldown.
	CooldownDuration float64 `protobuf:"fixed64,3,opt,name=cooldown_duration,json=cooldownDuration,proto3" json:"cooldown_duration,omitempty"`
	// counter value (curent counter).
	Counter float64 `protobuf:"fixed64,4,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (x *SpecialEffectParameter) Reset() {
	*x = SpecialEffectParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_world_parameter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialEffectParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialEffectParameter) ProtoMessage() {}

func (x *SpecialEffectParameter) ProtoReflect() protoreflect.Message {
	mi := &file_world_parameter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialEffectParameter.ProtoReflect.Descriptor instead.
func (*SpecialEffectParameter) Descriptor() ([]byte, []int) {
	return file_world_parameter_proto_rawDescGZIP(), []int{0}
}

func (x *SpecialEffectParameter) GetSpecialStateEnum() SpecialStateEnum {
	if x != nil {
		return x.SpecialStateEnum
	}
	return SpecialStateEnum_SPECIAL_STATE_WAIT
}

func (x *SpecialEffectParameter) GetEffectDuration() float64 {
	if x != nil {
		return x.EffectDuration
	}
	return 0
}

func (x *SpecialEffectParameter) GetCooldownDuration() float64 {
	if x != nil {
		return x.CooldownDuration
	}
	return 0
}

func (x *SpecialEffectParameter) GetCounter() float64 {
	if x != nil {
		return x.Counter
	}
	return 0
}

// Physical property of the element.
// Next: 7
type Physic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sphere radius.
	Radius float64 `protobuf:"fixed64,1,opt,name=radius,proto3" json:"radius,omitempty"`
	// weight total.
	Mass float64 `protobuf:"fixed64,2,opt,name=mass,proto3" json:"mass,omitempty"`
	// Sphere position.
	Position *Vector3 `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	// Velocity the speed it has d(position)/dt.
	PositionDt *Vector3 `protobuf:"bytes,5,opt,name=position_dt,json=positionDt,proto3" json:"position_dt,omitempty"`
	// Sphere look direction.
	Orientation *Vector4 `protobuf:"bytes,4,opt,name=orientation,proto3" json:"orientation,omitempty"`
	// Rotation d(orientation)/dt.
	OrientationDt *Vector4 `protobuf:"bytes,6,opt,name=orientation_dt,json=orientationDt,proto3" json:"orientation_dt,omitempty"`
}

func (x *Physic) Reset() {
	*x = Physic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_world_parameter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Physic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Physic) ProtoMessage() {}

func (x *Physic) ProtoReflect() protoreflect.Message {
	mi := &file_world_parameter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Physic.ProtoReflect.Descriptor instead.
func (*Physic) Descriptor() ([]byte, []int) {
	return file_world_parameter_proto_rawDescGZIP(), []int{1}
}

func (x *Physic) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *Physic) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *Physic) GetPosition() *Vector3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Physic) GetPositionDt() *Vector3 {
	if x != nil {
		return x.PositionDt
	}
	return nil
}

func (x *Physic) GetOrientation() *Vector4 {
	if x != nil {
		return x.Orientation
	}
	return nil
}

func (x *Physic) GetOrientationDt() *Vector4 {
	if x != nil {
		return x.OrientationDt
	}
	return nil
}

// Sphere element in the world.
// Next: 5
type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Material string.
	Color *Vector3 `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	// Physic, position, speed etc...
	Physic *Physic `protobuf:"bytes,3,opt,name=physic,proto3" json:"physic,omitempty"`
	// What type of element is it?
	TypeEnum TypeEnum `protobuf:"varint,4,opt,name=type_enum,json=typeEnum,proto3,enum=proto.TypeEnum" json:"type_enum,omitempty"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_world_parameter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_world_parameter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_world_parameter_proto_rawDescGZIP(), []int{2}
}

func (x *Element) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Element) GetColor() *Vector3 {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Element) GetPhysic() *Physic {
	if x != nil {
		return x.Physic
	}
	return nil
}

func (x *Element) GetTypeEnum() TypeEnum {
	if x != nil {
		return x.TypeEnum
	}
	return TypeEnum_TYPE_UNKNOWN
}

// Character it will be represented by a sphere on server.
// Next: 9
type Character struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Character name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Color string.
	Color *Vector3 `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	// Physic paramters.
	Physic *Physic `protobuf:"bytes,3,opt,name=physic,proto3" json:"physic,omitempty"`
	// G force.
	GForce *Vector3 `protobuf:"bytes,4,opt,name=g_force,json=gForce,proto3" json:"g_force,omitempty"`
	// Normal used by camera (is normalize(-gforce)).
	// Could also be normalize(postion)?
	Normal *Vector3 `protobuf:"bytes,5,opt,name=normal,proto3" json:"normal,omitempty"`
	// Status of the element.
	StatusEnum StatusEnum `protobuf:"varint,6,opt,name=status_enum,json=statusEnum,proto3,enum=proto.StatusEnum" json:"status_enum,omitempty"`
	// Special effect boost.
	SpecialEffectBoost *SpecialEffectParameter `protobuf:"bytes,7,opt,name=special_effect_boost,json=specialEffectBoost,proto3" json:"special_effect_boost,omitempty"`
	// Character type.
	CharacterType CharacterTypeEnum `protobuf:"varint,8,opt,name=character_type,json=characterType,proto3,enum=proto.CharacterTypeEnum" json:"character_type,omitempty"`
}

func (x *Character) Reset() {
	*x = Character{}
	if protoimpl.UnsafeEnabled {
		mi := &file_world_parameter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character) ProtoMessage() {}

func (x *Character) ProtoReflect() protoreflect.Message {
	mi := &file_world_parameter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character.ProtoReflect.Descriptor instead.
func (*Character) Descriptor() ([]byte, []int) {
	return file_world_parameter_proto_rawDescGZIP(), []int{3}
}

func (x *Character) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Character) GetColor() *Vector3 {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Character) GetPhysic() *Physic {
	if x != nil {
		return x.Physic
	}
	return nil
}

func (x *Character) GetGForce() *Vector3 {
	if x != nil {
		return x.GForce
	}
	return nil
}

func (x *Character) GetNormal() *Vector3 {
	if x != nil {
		return x.Normal
	}
	return nil
}

func (x *Character) GetStatusEnum() StatusEnum {
	if x != nil {
		return x.StatusEnum
	}
	return StatusEnum_STATUS_UNKNOWN
}

func (x *Character) GetSpecialEffectBoost() *SpecialEffectParameter {
	if x != nil {
		return x.SpecialEffectBoost
	}
	return nil
}

func (x *Character) GetCharacterType() CharacterTypeEnum {
	if x != nil {
		return x.CharacterType
	}
	return CharacterTypeEnum_CHARACTER_NONE
}

// ColorParameter
// Next: 3
type ColorParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Color name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Color value.
	Color *Vector3 `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *ColorParameter) Reset() {
	*x = ColorParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_world_parameter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColorParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColorParameter) ProtoMessage() {}

func (x *ColorParameter) ProtoReflect() protoreflect.Message {
	mi := &file_world_parameter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColorParameter.ProtoReflect.Descriptor instead.
func (*ColorParameter) Descriptor() ([]byte, []int) {
	return file_world_parameter_proto_rawDescGZIP(), []int{4}
}

func (x *ColorParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColorParameter) GetColor() *Vector3 {
	if x != nil {
		return x.Color
	}
	return nil
}

// PlayerParameter
// Next: 15
type PlayerParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vertical speed (jumping).
	VerticalSpeed float64 `protobuf:"fixed64,1,opt,name=vertical_speed,json=verticalSpeed,proto3" json:"vertical_speed,omitempty"`
	// Horizontal speed (running).
	HorizontalSpeed float64 `protobuf:"fixed64,2,opt,name=horizontal_speed,json=horizontalSpeed,proto3" json:"horizontal_speed,omitempty"`
	// Boost speed.
	BoostSpeed float64 `protobuf:"fixed64,3,opt,name=boost_speed,json=boostSpeed,proto3" json:"boost_speed,omitempty"`
	// Player start mass.
	StartMass float64 `protobuf:"fixed64,4,opt,name=start_mass,json=startMass,proto3" json:"start_mass,omitempty"`
	// Player drop height (start at planet radius and add this value).
	DropHeight float64 `protobuf:"fixed64,5,opt,name=drop_height,json=dropHeight,proto3" json:"drop_height,omitempty"`
	// Penalty for eating too similar to player color.
	Penalty float64 `protobuf:"fixed64,6,opt,name=penalty,proto3" json:"penalty,omitempty"`
	// living cost in mass value.
	LivingCost float64 `protobuf:"fixed64,7,opt,name=living_cost,json=livingCost,proto3" json:"living_cost,omitempty"`
	// Friction (this will stop the move at a certain point).
	Friction float64 `protobuf:"fixed64,8,opt,name=friction,proto3" json:"friction,omitempty"`
	// Victory size (in volume).
	VictorySize float64 `protobuf:"fixed64,9,opt,name=victory_size,json=victorySize,proto3" json:"victory_size,omitempty"`
	// Size at which you cannot grow with upgrades.
	MaxUpgradeGrow float64 `protobuf:"fixed64,10,opt,name=max_upgrade_grow,json=maxUpgradeGrow,proto3" json:"max_upgrade_grow,omitempty"`
	// Disconnection timeout.
	DisconnectionTimeout float64 `protobuf:"fixed64,11,opt,name=disconnection_timeout,json=disconnectionTimeout,proto3" json:"disconnection_timeout,omitempty"`
	// Eating speed.
	EatSpeed float64 `protobuf:"fixed64,12,opt,name=eat_speed,json=eatSpeed,proto3" json:"eat_speed,omitempty"`
	// Color list.
	ColorParameters []*ColorParameter `protobuf:"bytes,13,rep,name=color_parameters,json=colorParameters,proto3" json:"color_parameters,omitempty"`
	// Special effect boost.
	SpecialEffectBoost *SpecialEffectParameter `protobuf:"bytes,14,opt,name=special_effect_boost,json=specialEffectBoost,proto3" json:"special_effect_boost,omitempty"`
}

func (x *PlayerParameter) Reset() {
	*x = PlayerParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_world_parameter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerParameter) ProtoMessage() {}

func (x *PlayerParameter) ProtoReflect() protoreflect.Message {
	mi := &file_world_parameter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerParameter.ProtoReflect.Descriptor instead.
func (*PlayerParameter) Descriptor() ([]byte, []int) {
	return file_world_parameter_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerParameter) GetVerticalSpeed() float64 {
	if x != nil {
		return x.VerticalSpeed
	}
	return 0
}

func (x *PlayerParameter) GetHorizontalSpeed() float64 {
	if x != nil {
		return x.HorizontalSpeed
	}
	return 0
}

func (x *PlayerParameter) GetBoostSpeed() float64 {
	if x != nil {
		return x.BoostSpeed
	}
	return 0
}

func (x *PlayerParameter) GetStartMass() float64 {
	if x != nil {
		return x.StartMass
	}
	return 0
}

func (x *PlayerParameter) GetDropHeight() float64 {
	if x != nil {
		return x.DropHeight
	}
	return 0
}

func (x *PlayerParameter) GetPenalty() float64 {
	if x != nil {
		return x.Penalty
	}
	return 0
}

func (x *PlayerParameter) GetLivingCost() float64 {
	if x != nil {
		return x.LivingCost
	}
	return 0
}

func (x *PlayerParameter) GetFriction() float64 {
	if x != nil {
		return x.Friction
	}
	return 0
}

func (x *PlayerParameter) GetVictorySize() float64 {
	if x != nil {
		return x.VictorySize
	}
	return 0
}

func (x *PlayerParameter) GetMaxUpgradeGrow() float64 {
	if x != nil {
		return x.MaxUpgradeGrow
	}
	return 0
}

func (x *PlayerParameter) GetDisconnectionTimeout() float64 {
	if x != nil {
		return x.DisconnectionTimeout
	}
	return 0
}

func (x *PlayerParameter) GetEatSpeed() float64 {
	if x != nil {
		return x.EatSpeed
	}
	return 0
}

func (x *PlayerParameter) GetColorParameters() []*ColorParameter {
	if x != nil {
		return x.ColorParameters
	}
	return nil
}

func (x *PlayerParameter) GetSpecialEffectBoost() *SpecialEffectParameter {
	if x != nil {
		return x.SpecialEffectBoost
	}
	return nil
}

// WorldDatabase saved as a file.
// Next: 5
type WorldDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Elements list.
	Elements []*Element `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	// Characters list.
	Characters []*Character `protobuf:"bytes,2,rep,name=characters,proto3" json:"characters,omitempty"`
	// Present time on the server.
	Time float64 `protobuf:"fixed64,3,opt,name=time,proto3" json:"time,omitempty"`
	// World parameter this will be moved to client at connection.
	PlayerParameter *PlayerParameter `protobuf:"bytes,4,opt,name=player_parameter,json=playerParameter,proto3" json:"player_parameter,omitempty"`
}

func (x *WorldDatabase) Reset() {
	*x = WorldDatabase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_world_parameter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldDatabase) ProtoMessage() {}

func (x *WorldDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_world_parameter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldDatabase.ProtoReflect.Descriptor instead.
func (*WorldDatabase) Descriptor() ([]byte, []int) {
	return file_world_parameter_proto_rawDescGZIP(), []int{6}
}

func (x *WorldDatabase) GetElements() []*Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *WorldDatabase) GetCharacters() []*Character {
	if x != nil {
		return x.Characters
	}
	return nil
}

func (x *WorldDatabase) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WorldDatabase) GetPlayerParameter() *PlayerParameter {
	if x != nil {
		return x.PlayerParameter
	}
	return nil
}

var File_world_parameter_proto protoreflect.FileDescriptor

var file_world_parameter_proto_rawDesc = []byte{
	0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xcf, 0x01, 0x0a, 0x16, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x12,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11,
	0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x22, 0xfa, 0x01, 0x0a, 0x06, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x34, 0x52, 0x0b, 0x6f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0e, 0x6f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x34, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x74,
	0x22, 0x98, 0x01, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x68, 0x79, 0x73, 0x69, 0x63, 0x52, 0x06, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x12, 0x2c, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x83, 0x03, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x79, 0x73,
	0x69, 0x63, 0x52, 0x06, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x12, 0x27, 0x0a, 0x07, 0x67, 0x5f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x06, 0x67, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x33, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x4f, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x12, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xcd, 0x04,
	0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x61,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x61, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x76,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x12, 0x33, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x65, 0x61, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x10, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x14,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x22, 0xc4, 0x01,
	0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x2a, 0x42, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x4f,
	0x4b, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x4f, 0x0a, 0x09, 0x56, 0x69, 0x74, 0x61,
	0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x41,
	0x4c, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x54, 0x41, 0x4c, 0x5f,
	0x44, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x49, 0x54, 0x41, 0x4c, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0x6f, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4a, 0x55, 0x4d, 0x50,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x10, 0x04, 0x2a, 0x97, 0x01, 0x0a, 0x08, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x04,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x57, 0x4e, 0x10, 0x05,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x10, 0x06,
	0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54,
	0x45, 0x52, 0x10, 0x07, 0x2a, 0x60, 0x0a, 0x10, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4c,
	0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x41, 0x52, 0x41, 0x43, 0x54,
	0x45, 0x52, 0x5f, 0x4e, 0x50, 0x43, 0x10, 0x02, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x69, 0x72, 0x75, 0x6c, 0x2f, 0x67, 0x6f,
	0x5f, 0x64, 0x61, 0x72, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x64,
	0x61, 0x72, 0x77, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_world_parameter_proto_rawDescOnce sync.Once
	file_world_parameter_proto_rawDescData = file_world_parameter_proto_rawDesc
)

func file_world_parameter_proto_rawDescGZIP() []byte {
	file_world_parameter_proto_rawDescOnce.Do(func() {
		file_world_parameter_proto_rawDescData = protoimpl.X.CompressGZIP(file_world_parameter_proto_rawDescData)
	})
	return file_world_parameter_proto_rawDescData
}

var file_world_parameter_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_world_parameter_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_world_parameter_proto_goTypes = []interface{}{
	(ReturnEnum)(0),                // 0: proto.ReturnEnum
	(VitalEnum)(0),                 // 1: proto.VitalEnum
	(StatusEnum)(0),                // 2: proto.StatusEnum
	(TypeEnum)(0),                  // 3: proto.TypeEnum
	(SpecialStateEnum)(0),          // 4: proto.SpecialStateEnum
	(CharacterTypeEnum)(0),         // 5: proto.CharacterTypeEnum
	(*SpecialEffectParameter)(nil), // 6: proto.SpecialEffectParameter
	(*Physic)(nil),                 // 7: proto.Physic
	(*Element)(nil),                // 8: proto.Element
	(*Character)(nil),              // 9: proto.Character
	(*ColorParameter)(nil),         // 10: proto.ColorParameter
	(*PlayerParameter)(nil),        // 11: proto.PlayerParameter
	(*WorldDatabase)(nil),          // 12: proto.WorldDatabase
	(*Vector3)(nil),                // 13: proto.Vector3
	(*Vector4)(nil),                // 14: proto.Vector4
}
var file_world_parameter_proto_depIdxs = []int32{
	4,  // 0: proto.SpecialEffectParameter.special_state_enum:type_name -> proto.SpecialStateEnum
	13, // 1: proto.Physic.position:type_name -> proto.Vector3
	13, // 2: proto.Physic.position_dt:type_name -> proto.Vector3
	14, // 3: proto.Physic.orientation:type_name -> proto.Vector4
	14, // 4: proto.Physic.orientation_dt:type_name -> proto.Vector4
	13, // 5: proto.Element.color:type_name -> proto.Vector3
	7,  // 6: proto.Element.physic:type_name -> proto.Physic
	3,  // 7: proto.Element.type_enum:type_name -> proto.TypeEnum
	13, // 8: proto.Character.color:type_name -> proto.Vector3
	7,  // 9: proto.Character.physic:type_name -> proto.Physic
	13, // 10: proto.Character.g_force:type_name -> proto.Vector3
	13, // 11: proto.Character.normal:type_name -> proto.Vector3
	2,  // 12: proto.Character.status_enum:type_name -> proto.StatusEnum
	6,  // 13: proto.Character.special_effect_boost:type_name -> proto.SpecialEffectParameter
	5,  // 14: proto.Character.character_type:type_name -> proto.CharacterTypeEnum
	13, // 15: proto.ColorParameter.color:type_name -> proto.Vector3
	10, // 16: proto.PlayerParameter.color_parameters:type_name -> proto.ColorParameter
	6,  // 17: proto.PlayerParameter.special_effect_boost:type_name -> proto.SpecialEffectParameter
	8,  // 18: proto.WorldDatabase.elements:type_name -> proto.Element
	9,  // 19: proto.WorldDatabase.characters:type_name -> proto.Character
	11, // 20: proto.WorldDatabase.player_parameter:type_name -> proto.PlayerParameter
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_world_parameter_proto_init() }
func file_world_parameter_proto_init() {
	if File_world_parameter_proto != nil {
		return
	}
	file_vector_math_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_world_parameter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialEffectParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_world_parameter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Physic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_world_parameter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_world_parameter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_world_parameter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColorParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_world_parameter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_world_parameter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldDatabase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_world_parameter_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_world_parameter_proto_goTypes,
		DependencyIndexes: file_world_parameter_proto_depIdxs,
		EnumInfos:         file_world_parameter_proto_enumTypes,
		MessageInfos:      file_world_parameter_proto_msgTypes,
	}.Build()
	File_world_parameter_proto = out.File
	file_world_parameter_proto_rawDesc = nil
	file_world_parameter_proto_goTypes = nil
	file_world_parameter_proto_depIdxs = nil
}
